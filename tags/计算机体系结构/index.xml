<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机体系结构 on Littleshark</title>
    <link>https://littlesharkcug.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 计算机体系结构 on Littleshark</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Jun 2020 20:39:49 +0800</lastBuildDate>
    
	<atom:link href="https://littlesharkcug.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>指令系统</title>
      <link>https://littlesharkcug.github.io/%E6%96%87%E7%AB%A0/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 06 Jun 2020 20:39:49 +0800</pubDate>
      
      <guid>https://littlesharkcug.github.io/%E6%96%87%E7%AB%A0/%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F/</guid>
      <description>指令系统基本概念 基本概念 指令格式：长度（定长、变长）、编码（哈夫曼编码）
操作数存储位置：寄存器、主存
操作数存储类型：整、浮点
操作数存储长度：字节、字、双字
操作数存储个数：1,2
寻址方式：寄存器、立即数、间接寻址
指令系统的发展与改进 考虑到CPU时间，要减少指令条数，减少指令CPI
复杂指令系统：CISC （X86） 缺点：
 设计时间长 需要大量硬件支持 大量复杂指令使用频率很低 操作复杂，CPI大  精简指令系统：RISC（MIPS） 指令条数少；指令格式简单；减少寻址方式；只有load和store采访问存储器，其他指令都通过寄存器访问；
开源硬件 RISC-V
MIPS指令 MIPS寄存器  32个通用处理器 R0,R1&amp;hellip;&amp;hellip;..R31 32个64位浮点数寄存器F0&amp;hellip;&amp;hellip;F31可以存放单精度和双精度  MIPS数据表示 字节、半子、双字
MIPS寻址方式   立即数寻址与偏移量寻址（下面两种方式也是这两种的变形）
  寄存器间接寻址（就是把零当做偏移量寻址）
  16位绝对寻址（通过把R0作为基址寄存器完成的）
  </description>
    </item>
    
  </channel>
</rss>